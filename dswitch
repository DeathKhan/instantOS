#!/bin/bash

##############################################
## dwm popup to choose between open windows ##
## does not change to respective monitor    ##
##############################################

if ! [ -n "$1" ]; then
    # Date format, for use as the prompt.
    date=$(date +"%a %d. %b %R")

    # dmenu cannot display more than 30 lines, to avoid screen clutter. Only relevant if you have more than 30 windows open.
    height=$(wmctrl -l | wc -l)
    if [[ $height -gt 30 ]]; then
        heightfit=30
    else
        heightfit=$height
    fi

    num=$(wmctrl -l | sed 's/  / /' | cut -d " " -f 4- | nl -w 3 -n rn | sed -r 's/^([ 0-9]+)[ \t]*(.*)$/\1 - \2/' | dmenu -b -i -p "$date" -l $heightfit | cut -d '-' -f -1)
    [[ -z "$num" ]] && exit

    WID=$(wmctrl -l | sed -n "$num p" | cut -c -10)
else
    WID="$1"
fi

echo "focus target $WID"

focuswin() {
    [[ $1 =~ "," ]] && echo "error focussing" && return 1
    wmctrl -i -a "$1"
}

if ! [ -e ~/paperbenni/ismultimonitor ]; then
    focuswin "$WID"
    echo "exiting"
    exit
fi

getmonitor() {
    XPOS=$(xdotool getwindowfocus getwindowgeometry | grep -Eoi 'position.*,' | grep -o '[0-9]*')
    if [ "$XPOS" -gt "1919" ]; then
        echo "1"
    else
        echo "0"
    fi
}

OLDWID=$(pfw)
OLDMONITOR=$(getmonitor)
focuswin "$WID"

if [ "$(pfw)" = "$WID" ]; then
    exit
else
    
    if ! [ "$(getmonitor)" = "$OLDMONITOR" ]; then
        xdotool key "super+comma"
    fi

    if ! [ "$(pfw)" = "$OLDWID" ]; then
        if ! [ "$OLDWID" = "0x000001e1" ]; then
            xdotool key "super+Tab"
        fi
    fi
    xdotool key "super+comma"
    focuswin "$WID"
fi
